# -*- mode: toml; -*-
[profile.default]
allow_paths = ['interfaces', 'contracts', 'src']
include_paths = []
src = "src"
test = "test"
script = "script"
out = "out"
libs = ["lib"]
remappings = []
# @see {@link https://github.com/foundry-rs/foundry/issues/4060}
auto_detect_remappings = false
libraries = []
cache = true
cache_path = "cache"
broadcast = "broadcast"
force = false
# Not all networks support PUSH0 just yet!
evm_version = "shanghai"
gas_reports = ["*"]
gas_reports_ignore = []
auto_detect_solc = true
offline = false
verbosity = 0

# Ignored Error codes
# 2018 Function state mutability can be restricted to pure
# 3420 Source file does not specify required compiler version
# 3716 Multiple SPDX license identifiers found in source file
ignored_error_codes = [
	1878,
	2018,
	3420,
	3716,
]
deny_warnings = false
build_info = true
ffi = false
sender = '0xafFEaFFEAFfeAfFEAffeaFfEAfFEaffeafFeAFfE'
tx_origin = '0xAaaaAaAAaaaAAaAAaAaaaaAAAAAaAaaaAaAaaAA0'
initial_balance = "0xffffffffffffffffffffffff"
block_number = 1
gas_limit = 9223372036854775807
block_base_fee_per_gas = 7
block_coinbase = "0x0000000000000000000000000000000000000000"
block_prevrandao = "0x0000000000000000000000000000000000000000000000000000000000000000"
block_timestamp = 1
block_difficulty = 0
memory_limit = 33_554_432

# includes the contract's metadata in the contract's json artifact
extra_output = ['irOptimized', 'evm.assembly']
# emits the output selection as separate json artifact files
extra_output_files = ['metadata']

names = false
sizes = false
optimizer = true
optimizer_runs = 4_000
via_ir = false
no_storage_caching = false
no_rpc_rate_limit = false
bytecode_hash = "none"
cbor_metadata = false
sparse_mode = false

[profile.ci]
optimizer = false
fuzz_runs = 4_069
force = true
verbosity = 4
gas_reports = ["*"]

[[profile.default.fs_permissions]]
access = "read"
path = "out"

[profile.default.rpc_storage_caching]
chains = "all"
endpoints = "all"

[fmt]
line_length = 120
tab_width = 4
bracket_spacing = false
int_types = "long"
multiline_func_header = "attributes_first"
quote_style = "double"
number_underscore = "preserve"
single_line_statement_blocks = "preserve"
override_spacing = false
wrap_comments = false
ignore = []
contract_new_lines = false

[doc]
out = "docs"
title = ""
book = "book.toml"
ignore = []

[fuzz]
# The number of fuzz runs for fuzz tests
runs = 10_000
# The maximum number of test case rejections allowed by proptest, to be
# encountered during usage of `vm.assume` cheatcode. This will be used
# to set the `max_global_rejects` value in proptest test runner config.
# `max_local_rejects` option isn't exposed here since we're not using
# `prop_filter`.
max_test_rejects = 120000
# The weight of the dictionary
dictionary_weight = 40
# The flag indicating whether to include values from storage
include_storage = true
# The flag indicating whether to include push bytes values
include_push_bytes = true

[invariant]
# The number of runs that must execute for each invariant test group
runs = 256
# The number of calls executed to attempt to break invariants in one run
depth = 100
# Fails the invariant fuzzing if a revert occurs
fail_on_revert = false
# Allows overriding an unsafe external call when running invariant tests. eg. reentrancy checks
call_override = false
# The weight of the dictionary
dictionary_weight = 80
# The flag indicating whether to include values from storage
include_storage = true
# The flag indicating whether to include push bytes values
include_push_bytes = true

[profile.default.optimizer_details]
# constantOptimizer = true
yul = true
# this sets the `yulDetails` of the `optimizer_details` for the `default` profile
[profile.default.optimizer_details.yulDetails]
stackAllocation = false
optimizerSteps = 'u'

# [default.model_checker]
# contracts = { '/path/to/project/src/Contract.sol' = [ 'Contract' ] }
# engine = 'chc'
# timeout = 10000
# targets = [ 'assert' ]
